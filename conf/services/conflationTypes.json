{
    "Roads": {
        "matcher": "hoot::HighwayMatchCreator",
        "merger": "hoot::HighwayMergerCreator",
        "members": {
            "search.radius.highway": "Highway search radius",
            "conflate.match.highway.classifier": "Match classifier",
            "highway.merge.tags.only": "'Merge tags only",
            "highway.matcher.heading.delta": "Matcher heading delta",
            "highway.matcher.max.angle": "Matcher max angle",
            "highway.max.enum.diff": "Maximum enumerated types difference",
            "network.matcher": "Network matcher"
        }
    },
    "RoadsNetwork": {
        "matcher": "hoot::NetworkMatchCreator",
        "merger": "hoot::NetworkMergerCreator",
        "members": {}
    },
    "Buildings": {
        "matcher": "hoot::BuildingMatchCreator",
        "merger": "hoot::BuildingMergerCreator",
        "members": {
            "building.review.if.secondary.newer": "Review if secondary dataset is newer",
            "building.date.format": "Date format",
            "building.date.tag.key": "Date tag key",
            "building.keep.more.complex.geometry.when.auto.merging": "Keep more complicated geometry when auto merging",
            "building.review.matches.other.than.one.to.one": "Mark all non one to one matches for review" 
        }
    },
    "Pois": {
        "matcher": "hoot::ScriptMatchCreator,PoiGeneric.js",
        "merger": "hoot::ScriptMergerCreator",
        "members": {}
    },
    "PoiPolygon": {
        "matcher": "hoot::PoiPolygonMatchCreator",
        "merger": "hoot::PoiPolygonMergerCreator",
        "members": {
            "address.additional.tag.keys": "Address additional tag keys",
            "poi.polygon.address.match.enabled": "Enable address matching",
            "poi.polygon.auto.merge.many.poi.to.one.poly.matches": "Automatically merge all pois that match single polygon",
            "poi.polygon.disable.same.source.conflation": "Disable same source conflation",
            "poi.polygon.disable.same.source.conflation.match.tag.key.prefix.only": "Match key prefix only if same source conflation disabled",
            "poi.polygon.keep.closest.matches.only": "Keep closest matches only",
            "poi.polygon.match.distance.threshold" : "Match distance threshold",
            "poi.polygon.match.evidence.threshold": "Match evidence threshold",
            "poi.polygon.name.score.threshold": "Name score threshold",
            "phone.number.additional.tag.keys": "Additional phone number tag keys",
            "poi.polygon.phone.number.match.enabled": "Enable phone number matching",
            "phone.number.region.code": "Phone number regional code",
            "phone.number.search.in.text": "Search for phone number in text",
            "poi.polygon.promote.points.with.addresses.to.pois": "Treat points with address tags as pois",
            "poi.polygon.review.distance.threshold": "Review distance threshold",
            "poi.polygon.review.evidence.threshold": "Review evidence threshold",
            "poi.polygon.review.if.matched.types": "Tags to use for always mark for review",
            "poi.polygon.review.multiuse.buildings": "Always mark multiuse buildings for review",
            "poi.polygon.source.tag.key": "Disable same source conflation 'source' tag",
            "poi.polygon.type.score.threshold": "Type score threshold"
        }
    },
    "Areas": {
        "matcher": "hoot::ScriptMatchCreator,Area.js",
        "merger": "hoot::ScriptMergerCreator",
        "members": {}
    },
    "Railways": {
        "matcher": "hoot::ScriptMatchCreator,Railway.js",
        "merger": "hoot::ScriptMergerCreator",
        "members": {}
    },
    "Powerlines": {
        "matcher": "hoot::ScriptMatchCreator,PowerLine.js",
        "merger": "hoot::ScriptMergerCreator",
        "members": {}
    },
    "Waterways": {
        "matcher": "hoot::ScriptMatchCreator,LinearWaterway.js",
        "merger": "hoot::ScriptMergerCreator",
        "members": {}
    }
}